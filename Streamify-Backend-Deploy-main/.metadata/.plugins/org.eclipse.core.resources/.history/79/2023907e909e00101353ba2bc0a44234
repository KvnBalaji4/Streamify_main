package com.demo.video;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/videos")
@CrossOrigin(origins = "http://localhost:5173") // Allow React frontend
public class VideoController {

    @Autowired
    private VideoRepository videoRepository;

    // ✅ Get all videos
    @GetMapping
    public List<Video> getAllVideos() {
        return videoRepository.findAll();
    }

    // ✅ Get videos by genre
    @GetMapping("/genre/{genre}")
    public List<Video> getVideosByGenre(@PathVariable String genre) {
        return videoRepository.findByGenresContaining(genre);
    }

    // ✅ Add video
    @PostMapping
    public ResponseEntity<Video> addVideo(@RequestBody Video video) {
        if (video.getTitle() == null || video.getDriveFileId() == null) {
            return ResponseEntity.badRequest().body(null);
        }
        Video savedVideo = videoRepository.save(video);
        return ResponseEntity.status(201).body(savedVideo);
    }

    // ✅ Update video
    @PutMapping("/{id}")
    public ResponseEntity<?> updateVideo(@PathVariable Long id, @RequestBody Video updatedVideo) {
        if (!videoRepository.existsById(id)) {
            return ResponseEntity.status(404).body("Video not found");
        }

        Video existingVideo = videoRepository.findById(id).get();
        existingVideo.setTitle(updatedVideo.getTitle());
        existingVideo.setDescription(updatedVideo.getDescription());
        existingVideo.setGenres(updatedVideo.getGenres());
        existingVideo.setYear(updatedVideo.getYear());
        existingVideo.setDuration(updatedVideo.getDuration());
        existingVideo.setThumbnailUrl(updatedVideo.getThumbnailUrl());
        existingVideo.setDriveFileId(updatedVideo.getDriveFileId());

        Video saved = videoRepository.save(existingVideo);
        return ResponseEntity.ok(saved);
    }

    // ✅ Delete video
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteVideo(@PathVariable Long id) {
        if (!videoRepository.existsById(id)) {
            return ResponseEntity.status(404).body("Video not found");
        }
        videoRepository.deleteById(id);
        return ResponseEntity.ok("Video deleted successfully");
    }
}
